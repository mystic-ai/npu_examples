{"ast":null,"code":"var _jsxFileName = \"/home/naval/neuroai/npu_python_client/examples/deepspeech/DeepSpeech-examples/web_microphone_websocket/src/App.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DOWNSAMPLING_WORKER = './downsampling_worker.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.startRecording = e => {\n      if (!this.state.recording) {\n        this.recordingInterval = setInterval(() => {\n          let recordingTime = new Date().getTime() - this.state.recordingStart;\n          this.setState({\n            recordingTime\n          });\n        }, 100);\n        this.setState({\n          recording: true,\n          recordingStart: new Date().getTime(),\n          recordingTime: 0\n        }, () => {\n          this.startMicrophone();\n        });\n      }\n    };\n\n    this.stopRecording = e => {\n      if (this.state.recording) {\n        if (this.socket.connected) {\n          this.socket.emit('stream-reset');\n        }\n\n        clearInterval(this.recordingInterval);\n        this.setState({\n          recording: false\n        }, () => {\n          this.stopMicrophone();\n        });\n      }\n    };\n\n    this.state = {\n      connected: false,\n      recording: false,\n      recordingStart: 0,\n      recordingTime: 0,\n      recognitionOutput: []\n    };\n  }\n\n  componentDidMount() {\n    let recognitionCount = 0;\n    this.socket = io.connect('http://localhost:4000', {});\n    this.socket.on('connect', () => {\n      console.log('socket connected');\n      this.setState({\n        connected: true\n      });\n    });\n    this.socket.on('disconnect', () => {\n      console.log('socket disconnected');\n      this.setState({\n        connected: false\n      });\n      this.stopRecording();\n    });\n    this.socket.on('recognize', results => {\n      console.log('recognized:', results);\n      const {\n        recognitionOutput\n      } = this.state;\n      results.id = recognitionCount++;\n      recognitionOutput.unshift(results);\n      this.setState({\n        recognitionOutput\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !this.state.connected || this.state.recording,\n          onClick: this.startRecording,\n          children: \"Start Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: !this.state.recording,\n          onClick: this.stopRecording,\n          children: \"Stop Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 5\n        }, this), this.renderTime()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 4\n      }, this), this.renderRecognitionOutput()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }, this);\n  }\n\n  renderTime() {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [(Math.round(this.state.recordingTime / 100) / 10).toFixed(1), \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this);\n  }\n\n  renderRecognitionOutput() {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: this.state.recognitionOutput.map(r => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: r.text\n        }, r.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }, this);\n  }\n\n  createAudioProcessor(audioContext, audioSource) {\n    let processor = audioContext.createScriptProcessor(4096, 1, 1);\n    const sampleRate = audioSource.context.sampleRate;\n    let downsampler = new Worker(DOWNSAMPLING_WORKER);\n    downsampler.postMessage({\n      command: \"init\",\n      inputSampleRate: sampleRate\n    });\n\n    downsampler.onmessage = e => {\n      if (this.socket.connected) {\n        console.log(e.data.buffer);\n        this.socket.emit('stream-data', e.data.buffer);\n      }\n    };\n\n    processor.onaudioprocess = event => {\n      var data = event.inputBuffer.getChannelData(0);\n      downsampler.postMessage({\n        command: \"process\",\n        inputFrame: data\n      });\n    };\n\n    processor.shutdown = () => {\n      processor.disconnect();\n      this.onaudioprocess = null;\n    };\n\n    processor.connect(audioContext.destination);\n    return processor;\n  }\n\n  startMicrophone() {\n    this.audioContext = new AudioContext();\n\n    const success = stream => {\n      console.log('started recording');\n      this.mediaStream = stream;\n      this.mediaStreamSource = this.audioContext.createMediaStreamSource(stream);\n      this.processor = this.createAudioProcessor(this.audioContext, this.mediaStreamSource);\n      this.mediaStreamSource.connect(this.processor);\n    };\n\n    const fail = e => {\n      console.error('recording failure', e);\n    };\n\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({\n        video: false,\n        audio: true\n      }).then(success).catch(fail);\n    } else {\n      navigator.getUserMedia({\n        video: false,\n        audio: true\n      }, success, fail);\n    }\n  }\n\n  stopMicrophone() {\n    if (this.mediaStream) {\n      this.mediaStream.getTracks()[0].stop();\n    }\n\n    if (this.mediaStreamSource) {\n      this.mediaStreamSource.disconnect();\n    }\n\n    if (this.processor) {\n      this.processor.shutdown();\n    }\n\n    if (this.audioContext) {\n      this.audioContext.close();\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/naval/neuroai/npu_python_client/examples/deepspeech/DeepSpeech-examples/web_microphone_websocket/src/App.js"],"names":["React","Component","io","DOWNSAMPLING_WORKER","App","constructor","props","startRecording","e","state","recording","recordingInterval","setInterval","recordingTime","Date","getTime","recordingStart","setState","startMicrophone","stopRecording","socket","connected","emit","clearInterval","stopMicrophone","recognitionOutput","componentDidMount","recognitionCount","connect","on","console","log","results","id","unshift","render","renderTime","renderRecognitionOutput","Math","round","toFixed","map","r","text","createAudioProcessor","audioContext","audioSource","processor","createScriptProcessor","sampleRate","context","downsampler","Worker","postMessage","command","inputSampleRate","onmessage","data","buffer","onaudioprocess","event","inputBuffer","getChannelData","inputFrame","shutdown","disconnect","destination","AudioContext","success","stream","mediaStream","mediaStreamSource","createMediaStreamSource","fail","error","navigator","mediaDevices","getUserMedia","video","audio","then","catch","getTracks","stop","close"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport io from 'socket.io-client';\n\nconst DOWNSAMPLING_WORKER = './downsampling_worker.js';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tconnected: false,\n\t\t\trecording: false,\n\t\t\trecordingStart: 0,\n\t\t\trecordingTime: 0,\n\t\t\trecognitionOutput: []\n\t\t};\n\t}\n\t\n\tcomponentDidMount() {\n\t\tlet recognitionCount = 0;\n\t\t\n\t\tthis.socket = io.connect('http://localhost:4000', {});\n\t\t\n\t\tthis.socket.on('connect', () => {\n\t\t\tconsole.log('socket connected');\n\t\t\tthis.setState({connected: true});\n\t\t});\n\t\t\n\t\tthis.socket.on('disconnect', () => {\n\t\t\tconsole.log('socket disconnected');\n\t\t\tthis.setState({connected: false});\n\t\t\tthis.stopRecording();\n\t\t});\n\t\t\n\t\tthis.socket.on('recognize', (results) => {\n\t\t\tconsole.log('recognized:', results);\n\t\t\tconst {recognitionOutput} = this.state;\n\t\t\tresults.id = recognitionCount++;\n\t\t\trecognitionOutput.unshift(results);\n\t\t\tthis.setState({recognitionOutput});\n\t\t});\n\t}\n\t\n\trender() {\n\t\treturn (<div className=\"App\">\n\t\t\t<div>\n\t\t\t\t<button disabled={!this.state.connected || this.state.recording} onClick={this.startRecording}>\n\t\t\t\t\tStart Recording\n\t\t\t\t</button>\n\t\t\t\t\n\t\t\t\t<button disabled={!this.state.recording} onClick={this.stopRecording}>\n\t\t\t\t\tStop Recording\n\t\t\t\t</button>\n\t\t\t\t\n\t\t\t\t{this.renderTime()}\n\t\t\t</div>\n\t\t\t{this.renderRecognitionOutput()}\n\t\t</div>);\n\t}\n\t\n\trenderTime() {\n\t\treturn (<span>\n\t\t\t{(Math.round(this.state.recordingTime / 100) / 10).toFixed(1)}s\n\t\t</span>);\n\t}\n\t\n\trenderRecognitionOutput() {\n\t\treturn (<ul>\n\t\t\t{this.state.recognitionOutput.map((r) => {\n\t\t\t\treturn (<li key={r.id}>{r.text}</li>);\n\t\t\t})}\n\t\t</ul>)\n\t}\n\t\n\tcreateAudioProcessor(audioContext, audioSource) {\n\t\tlet processor = audioContext.createScriptProcessor(4096, 1, 1);\n\t\t\n\t\tconst sampleRate = audioSource.context.sampleRate;\n\t\t\n\t\tlet downsampler = new Worker(DOWNSAMPLING_WORKER);\n\t\tdownsampler.postMessage({command: \"init\", inputSampleRate: sampleRate});\n\t\tdownsampler.onmessage = (e) => {\n\t\t\tif (this.socket.connected) {\n\t\t\t    console.log(e.data.buffer)\n\t\t\t\tthis.socket.emit('stream-data', e.data.buffer);\n\t\t\t}\n\t\t};\n\t\t\n\t\tprocessor.onaudioprocess = (event) => {\n\t\t\tvar data = event.inputBuffer.getChannelData(0);\n\t\t\tdownsampler.postMessage({command: \"process\", inputFrame: data});\n\t\t};\n\t\t\n\t\tprocessor.shutdown = () => {\n\t\t\tprocessor.disconnect();\n\t\t\tthis.onaudioprocess = null;\n\t\t};\n\t\t\n\t\tprocessor.connect(audioContext.destination);\n\t\t\n\t\treturn processor;\n\t}\n\t\n\tstartRecording = e => {\n\t\tif (!this.state.recording) {\n\t\t\tthis.recordingInterval = setInterval(() => {\n\t\t\t\tlet recordingTime = new Date().getTime() - this.state.recordingStart;\n\t\t\t\tthis.setState({recordingTime});\n\t\t\t}, 100);\n\t\t\t\n\t\t\tthis.setState({\n\t\t\t\trecording: true,\n\t\t\t\trecordingStart: new Date().getTime(),\n\t\t\t\trecordingTime: 0\n\t\t\t}, () => {\n\t\t\t\tthis.startMicrophone();\n\t\t\t});\n\t\t}\n\t};\n\t\n\tstartMicrophone() {\n\t\tthis.audioContext = new AudioContext();\n\t\t\n\t\tconst success = (stream) => {\n\t\t\tconsole.log('started recording');\n\t\t\tthis.mediaStream = stream;\n\t\t\tthis.mediaStreamSource = this.audioContext.createMediaStreamSource(stream);\n\t\t\tthis.processor = this.createAudioProcessor(this.audioContext, this.mediaStreamSource);\n\t\t\tthis.mediaStreamSource.connect(this.processor);\n\t\t};\n\t\t\n\t\tconst fail = (e) => {\n\t\t\tconsole.error('recording failure', e);\n\t\t};\n\t\t\n\t\tif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n\t\t\tnavigator.mediaDevices.getUserMedia({\n\t\t\t\tvideo: false,\n\t\t\t\taudio: true\n\t\t\t})\n\t\t\t.then(success)\n\t\t\t.catch(fail);\n\t\t}\n\t\telse {\n\t\t\tnavigator.getUserMedia({\n\t\t\t\tvideo: false,\n\t\t\t\taudio: true\n\t\t\t}, success, fail);\n\t\t}\n\t}\n\t\n\tstopRecording = e => {\n\t\tif (this.state.recording) {\n\t\t\tif (this.socket.connected) {\n\t\t\t\tthis.socket.emit('stream-reset');\n\t\t\t}\n\t\t\tclearInterval(this.recordingInterval);\n\t\t\tthis.setState({\n\t\t\t\trecording: false\n\t\t\t}, () => {\n\t\t\t\tthis.stopMicrophone();\n\t\t\t});\n\t\t}\n\t};\n\t\n\tstopMicrophone() {\n\t\tif (this.mediaStream) {\n\t\t\tthis.mediaStream.getTracks()[0].stop();\n\t\t}\n\t\tif (this.mediaStreamSource) {\n\t\t\tthis.mediaStreamSource.disconnect();\n\t\t}\n\t\tif (this.processor) {\n\t\t\tthis.processor.shutdown();\n\t\t}\n\t\tif (this.audioContext) {\n\t\t\tthis.audioContext.close();\n\t\t}\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}